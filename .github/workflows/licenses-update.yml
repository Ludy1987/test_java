name: License Report Workflow

on:
  push:
    branches:
      - main
    paths:
      - "build.gradle"
  pull_request_target:
    paths:
      - "build.gradle"

permissions:
  contents: read

jobs:
  generate-license-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c95a14d0e5bab51a9f56296a4eb0e416910cd350 # v2.10.3
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up JDK 17
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4.6.0
        with:
          java-version: "17"
          distribution: "adopt"

      - uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # v4.2.2

      - name: Run Gradle Command
        run: ./gradlew clean generateLicenseReport

      - name: Move and Rename License File
        run: |
          mv build/reports/dependency-license/index.json src/main/resources/static/3rdPartyLicenses.json

      - name: Set up git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run git add
        run: |
          git add src/main/resources/static/3rdPartyLicenses.json
          git diff --staged --quiet || echo "CHANGES_DETECTED=true" >> $GITHUB_ENV


      - name: Check if Pull Request exists
        id: check-pr
        if: env.CHANGES_DETECTED == 'true'
        run: |
          pr_number=$(gh pr list --state open --head update-3rd-party-licenses --json number -q '.[0].number')
          if [ -z "$pr_number" ]; then
            echo "No existing PR found. Creating a new one."
            echo "pr_exists=false" >> $GITHUB_ENV
          else
            echo "Existing PR found with number $pr_number."
            echo "pr_exists=true" >> $GITHUB_ENV
            echo "pr_number=$pr_number" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Pull Request
        if: env.pr_exists == 'false' && env.CHANGES_DETECTED == 'true'
        run: |
          gh pr create --base main --head update-3rd-party-licenses --title "Update 3rd Party Licenses" --body "Auto-generated PR to update 3rd Party Licenses" --label "Licenses,github-actions"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Existing Pull Request
        if: env.pr_exists == 'true' && env.CHANGES_DETECTED == 'true'
        run: |
          gh pr comment ${{ env.pr_number }} --body "The PR has been updated with new changes."
          gh pr update-branch ${{ env.pr_number }} --repo Ludy87/test_java
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Genehmige und merge PR automatisch
        if: env.pr_exists == 'true' && env.CHANGES_DETECTED == 'true'
        run: |
          gh pr review "${{ env.pr_number }}" --approve
          gh pr merge "${{ env.pr_number }}" --merge --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Pull Request
      #   id: cpr
      #   if: env.CHANGES_DETECTED == 'true'
      #   uses: peter-evans/create-pull-request@v7.0.1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit-message: "Update 3rd Party Licenses"
      #     committer: GitHub Action <action@github.com>
      #     author: GitHub Action <action@github.com>
      #     signoff: true
      #     base: main
      #     branch: update-3rd-party-licenses
      #     title: "Update 3rd Party Licenses"
      #     body: |
      #       Auto-generated by [create-pull-request][1]

      #       [1]: https://github.com/peter-evans/create-pull-request
      #     labels: licenses,github-actions
      #     draft: false
      #     delete-branch: true
      #     sign-commits: true

      # - run: echo ${{ steps.cpr.outputs.pull-request-operation }}

      # - run: echo ${{ github.event.action }}

      # - name: Auto approve
      #   if: steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated'
      #   run: gh pr review --approve "${{ steps.cpr.outputs.pull-request-number }}"
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true

      # - name: Enable auto-merge
      #   if: steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated'
      #   uses: peter-evans/enable-pull-request-automerge@a660677d5469627102a1c1e11409dd063606628d # v3.0.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      #     merge-method: squash # Choose the merge method: merge, squash, or rebase
