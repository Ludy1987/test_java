name: "License Report Workflow"

on:
  push:
    branches:
      - main
    paths:
      - "build.gradle"

permissions:
  contents: read
  pull-requests: write

jobs:
  generate-license-report:
    runs-on: ubuntu-latest

    steps:
      # Harden Runner
      - name: Harden Runner
        uses: step-security/harden-runner@c95a14d0e5bab51a9f56296a4eb0e416910cd350 # v2.10.3
        with:
          egress-policy: audit

      # Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"

      # Set up Gradle
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v2

      # Run Gradle to generate the license report
      - name: Run Gradle Command
        run: ./gradlew clean generateLicenseReport

      # Move and Rename the License File
      - name: Move and Rename License File
        run: |
          mv build/reports/dependency-license/index.json src/main/resources/static/3rdPartyLicenses.json

      # Set up git config
      - name: Set up git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Add the new or modified file and commit
      - name: Run git add and commit
        run: |
          git add src/main/resources/static/3rdPartyLicenses.json
          git diff --staged --quiet || echo "CHANGES_DETECTED=true" >> $GITHUB_ENV

      # Push the changes
      - name: Push changes to remote branch
        run: |
          git fetch origin
          git checkout -b update-3rd-party-licenses origin/main
          git push origin update-3rd-party-licenses

      # Create or update PR
      - name: Create or Update Pull Request
        id: pr
        run: |
          # PR details
          PR_TITLE="Update 3rd Party Licenses"
          PR_BODY="Auto-generated by create-pull-request"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="update-3rd-party-licenses"
          BASE_BRANCH="main"

          # Check if an open PR already exists
          PR_EXISTS=$(gh pr list --repo "$REPO_OWNER/$REPO_NAME" --base "$BASE_BRANCH" --head "$BRANCH_NAME" --state open --json number -q ".[0].number")

          if [ -z "$PR_EXISTS" ]; then
            # Create a new PR if none exists
            gh pr create --repo "$REPO_OWNER/$REPO_NAME" \
                         --title "$PR_TITLE" \
                         --body "$PR_BODY" \
                         --base "$BASE_BRANCH" \
                         --head "$BRANCH_NAME" \
                         --label "licenses,github-actions" \
                         --draft false \
                         --delete-branch
            echo "PR created successfully."
          else
            # Update the existing PR with a comment
            gh pr comment "$PR_EXISTS" --repo "$REPO_OWNER/$REPO_NAME" --body "Automatically updated after changes to 3rd Party Licenses."
            echo "Existing PR #$PR_EXISTS updated."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Wait for status checks to pass and auto-merge PR
      - name: Wait for status checks to pass and auto-merge PR
        run: |
          PR_NUMBER="${{ steps.pr.outputs.PR_NUMBER }}"
          if [ -n "$PR_NUMBER" ]; then
            echo "Waiting for status checks to pass..."
            # Warten auf den Status der PR-Prüfungen
            gh pr checks $PR_NUMBER --wait
            # Automatisches Mergen nach dem Bestehen aller Statusprüfungen
            gh pr merge $PR_NUMBER --squash --delete-branch --merge
            echo "PR #$PR_NUMBER merged successfully."
          else
            echo "No open PR found to merge."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - run: echo ${{ steps.cpr.outputs.pull-request-operation }}

      - name: Set PR Number as Output
        run: echo "PR_NUMBER=${{ steps.cpr.outputs.pull-request-number }}" >> $GITHUB_ENV

      - name: Squash Merge PR
        run: |
          PR_NUMBER=${{ steps.cpr.outputs.pull-request-number }} # Verwende die PR-Nummer, die im vorherigen Job festgelegt wurde
          if [ -n "$PR_NUMBER" ]; then
            gh pr merge $PR_NUMBER --squash --delete-branch --admin
            echo "PR #$PR_NUMBER merged successfully."
          else
            echo "No open PR found to merge."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - run: echo ${{ github.event.action }}

      # - name: Auto approve
      #   if: steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated'
      #   run: gh pr review --approve "${{ steps.cpr.outputs.pull-request-number }}"
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true

      # - name: Wait for status check to pass
      #   run: |
      #     gh pr checks update-3rd-party-licenses
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true

      # - name: Enable auto-merge
      #   if: steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated'
      #   run: |
      #     gh api \
      #     --method POST \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     /repos/${{ github.repository }}/merges \
      #     -f "base=main" -f "head=update-3rd-party-licenses" -f "commit_message=Shipped cool_feature!"
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
