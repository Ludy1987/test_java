name: Check Properties Files on PR

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - "src/main/resources/messages_*.properties"
      - ".github/workflows/check_prop.yml"


permissions:
  contents: write
  pull-requests: write

jobs:
  check-files:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.10.2
        with:
          egress-policy: audit

      - name: Checkout main branch
        run: |
          git clone --no-checkout https://github.com/${{ github.repository }} main-branch
          cd main-branch
          git fetch origin main
          git checkout main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PR branch
        run: |
          git clone --no-checkout https://github.com/${{ github.event.pull_request.head.repo.full_name }} pr-branch
          cd pr-branch
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.x"

      - name: Fetch PR changed files
        id: fetch-pr-changes
        run: |
          echo "Fetching PR changed files..."
          CHANGED_FILES=$(git diff --name-only main-branch...pr-branch | grep -E '^src/main/resources/messages_[a-zA-Z_]+\.properties$')

          echo "Processing changed files..."
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files found in PR. Exiting."
            echo "FAIL_JOB=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "$CHANGED_FILES" | tr '\n' ' ' > changed_files.txt
          echo "CHANGED_FILES=$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Determine reference file
        run: |
          echo "Determining reference file..."
          if grep -q "src/main/resources/messages_en_GB.properties" changed_files.txt; then
            echo "REFERENCE_FILE=pr-branch/src/main/resources/messages_en_GB.properties" >> $GITHUB_ENV
          else
            echo "REFERENCE_FILE=main-branch/src/main/resources/messages_en_GB.properties" >> $GITHUB_ENV
          fi

      - name: Run Python script to check files
        run: |
          echo "Running Python script to check files..."
          python main-branch/.github/scripts/check_language_properties.py \
            --actor ${{ github.actor }} \
            --reference-file "${REFERENCE_FILE}" \
            --branch pr-branch \
            --files "${CHANGED_FILES}" > result.txt || true

      - name: Capture output
        run: |
          if [ -f result.txt ] && [ -s result.txt ]; then
            SCRIPT_OUTPUT=$(cat result.txt)
            echo "SCRIPT_OUTPUT<<EOF" >> $GITHUB_ENV
            echo "$SCRIPT_OUTPUT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            if echo "$SCRIPT_OUTPUT" | grep -q "❌"; then
              echo "FAIL_JOB=true" >> $GITHUB_ENV
            else
              echo "FAIL_JOB=false" >> $GITHUB_ENV
            fi
          else
            echo "No output generated."
            echo "FAIL_JOB=false" >> $GITHUB_ENV
          fi

      - name: Post comment on PR
        if: env.SCRIPT_OUTPUT != ''
        uses: actions/github-script@v7
        with:
          script: |
            const { SCRIPT_OUTPUT } = process.env;
            const prNumber = context.issue.number;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes("## 🚀 Translation Verification Summary")
            );

            const newCommentBody = `## 🚀 Translation Verification Summary\n\n${SCRIPT_OUTPUT}`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: newCommentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: newCommentBody
              });
            }

      - name: Fail job if errors found
        if: env.FAIL_JOB == 'true'
        run: exit 1
