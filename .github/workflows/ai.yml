name: AI PR Title Review for Stirling-PDF

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  ai-title-review:
    permissions:
      contents: read
      pull-requests: write
      models: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup GitHub App Bot
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get PR diff
        id: get_diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > pr.diff
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat pr.diff >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI PR Title Analysis
        id: ai-title-analysis
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o
          prompt: |
            You are a professional software engineer. Based on the following git diff, generate a **concise** and **meaningful** pull request title in **English**, using **Markdown format** and starting with one of the conventional commit types:
            build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test.

            Do NOT use emojis. Do NOT include additional description. Output only a single **Markdown-formatted** line with no explanation.

            Example: `refactor: improve session lifecycle handling in login filter`

            Git diff:
            ```
            ${{ steps.get_diff.outputs.diff }}
            ```

            Compare the PR title `${{ github.event.pull_request.title }}` with your AI-generated title. Evaluate the PR title: if it does not follow the conventions or is unclear, return the AI-generated title. Otherwise, return the PR title as-is.

            Keep the response concise and formatted as markdown, with the rating and AI-generated title displayed prominently (e.g., "**Rating**: X/10", "**AI-Generated Title**: ...").

      - name: Extract title and prepare comment markdown
        run: |
          echo "${{ steps.ai-title-analysis.outputs.response }}" > /tmp/ai-raw.txt

          # Extract rating and AI title line
          RATING=$(grep '\*\*Rating\*\*' /tmp/ai-raw.txt || echo "")
          TITLE_LINE=$(grep '\*\*AI-Generated Title\*\*' /tmp/ai-raw.txt || echo "")
          TITLE=$(echo "$TITLE_LINE" | sed -E 's/\*\*AI-Generated Title\*\*: *`(.*)`/\1/')

          cat > /tmp/ai-title-comment.md <<EOF
          ## 🤖 AI PR Title Suggestion for Stirling-PDF

          $RATING
          $TITLE_LINE

          ### ⬇️ Suggested Title (copy & paste):
          \`\`\`
          $TITLE
          \`\`\`

          ---
          *Generated by GitHub Models AI*
          EOF

      - name: Post comment on PR if needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.setup-bot.outputs.token }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('/tmp/ai-title-comment.md', 'utf8');
            const { GITHUB_REPOSITORY } = process.env;
            const [owner, repo] = GITHUB_REPOSITORY.split('/');
            const issue_number = context.issue.number;

            const ratingMatch = body.match(/\*\*Rating\*\*: (\d+)\/10/);
            const rating = ratingMatch ? parseInt(ratingMatch[1], 10) : null;

            const expectedActor = "${{ steps.setup-bot.outputs.app-slug }}[bot]";
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number });

            const existing = comments.data.find(c =>
              c.user?.login === expectedActor &&
              c.body.includes("## 🤖 AI PR Title Suggestion for Stirling-PDF")
            );

            if (rating === null) {
              console.log("No rating found in AI response – skipping.");
              return;
            }

            if (rating <= 5) {
              if (existing) {
                await github.rest.issues.updateComment({
                  owner, repo,
                  comment_id: existing.id,
                  body
                });
                console.log("Updated existing suggestion comment.");
              } else {
                await github.rest.issues.createComment({
                  owner, repo, issue_number,
                  body
                });
                console.log("Created new suggestion comment.");
              }
            } else {
              const praise = `🤖 AI PR Title Suggestion for Stirling-PDF\n\nGreat job! The current PR title is clear and well-structured.\n\n✅ No suggestions needed.\n\n---\n*Validated by GitHub Models AI*`;

              if (existing) {
                await github.rest.issues.updateComment({
                  owner, repo,
                  comment_id: existing.id,
                  body: praise
                });
                console.log("Replaced suggestion with praise.");
              } else {
                console.log("Rating > 5 and no existing comment → skipping comment.");
              }
            }
