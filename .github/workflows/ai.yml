name: AI PR Title Review for Stirling-PDF

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  ai-title-review:
    permissions:
      contents: read
      pull-requests: write
      models: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup GitHub App Bot
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Gather PR Information
        id: pr-info
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Collect PR title and changed files
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only || echo "Unable to retrieve changed files")
          # Collect diff content for changed files
          DIFF_CONTENT=$(gh pr diff $PR_NUMBER || echo "Unable to retrieve diff content")

          # Save to files for AI processing
          echo "$PR_TITLE" > $GITHUB_WORKSPACE/pr-title.txt
          echo "$CHANGED_FILES" > $GITHUB_WORKSPACE/changed-files.txt
          echo "$DIFF_CONTENT" > $GITHUB_WORKSPACE/diff-content.txt

          # Initialize change scope
          CHANGE_SCOPE=""

          # Classify change scope based on file patterns specific to Stirling-PDF
          if [[ "$CHANGED_FILES" =~ ^src/main/java/stirling/software/SPDF/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}backend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/main/resources/(static|templates)/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}frontend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(Dockerfile.*|docker-compose.yml|src/main/resources/application.*\.properties) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}deployment,"
          fi
          if [[ "$CHANGED_FILES" =~ ^docs/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}documentation,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/test/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}tests,"
          fi
          if [[ "$CHANGED_FILES" =~ ^\.github/workflows/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}ci,"
          fi
          if [[ "$CHANGED_FILES" =~ ^main/resources/messages_[a-zA-Z_]{2}_[a-zA-Z_]{2,7}.properties ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}i18n,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(build.gradle|settings.gradle|README.md|\.gitignore) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}config,"
          fi

          # Fallback for unclassified files
          if [[ -z "$CHANGE_SCOPE" ]]; then
            CHANGE_SCOPE="other"
          else
            # Remove trailing comma
            CHANGE_SCOPE="${CHANGE_SCOPE%,}"
          fi

          echo "change-scope=$CHANGE_SCOPE" >> $GITHUB_OUTPUT

      - name: Debug File Contents
        run: |
          echo "Changed Files:"
          cat $GITHUB_WORKSPACE/changed-files.txt || echo "No changed files found"
          echo "Diff Content:"
          cat $GITHUB_WORKSPACE/diff-content.txt || echo "No diff content found"

      - name: AI PR Title Analysis
        id: ai-title-analysis
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o
          prompt: |
            Erstelle eine aussagekrÃ¤ftige Ãœberschrift fÃ¼r die PR auf github.com auf englisch und im Markdown Format ausgeben. Achte darauf, dass es in Markdown-Format ausgibts!
            Verwende fÃ¼r die Ãœberschrift, wenn mÃ¶glich: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test. Beachte das Ãœbersetzungen nicht docs zuzuordnen sind und verwende keine emojis

            **Diff Content:**

            ```
            $(cat $GITHUB_WORKSPACE/diff-content.txt)
            ```

            Please provide:
            1. Erstelle eine aussagekrÃ¤ftige Ãœberschrift fÃ¼r die PR auf github.com auf englisch und im Markdown Format ausgibts. Achte darauf, dass es in Markdown-Format ausgibts!
            2. Verwende fÃ¼r die Ãœberschrift, wenn mÃ¶glich: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test. Beachte das Ãœbersetzungen nicht docs zuzuordnen sind und verwende keine emojis

            Keep the response concise and formatted as markdown, with the rating and AI-generated title displayed prominently (e.g., "**Rating**: X/10", "**AI-Generated Title**: ...").

      - name: Update or Create PR Comment
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
        run: |
          # Create the comment content
          cat > /tmp/ai-title-comment.md << 'EOF'
          ## ðŸ¤– AI PR Title Suggestion for Stirling-PDF

          ${{ steps.ai-title-analysis.outputs.response }}

          ---
          *Generated by GitHub Models AI*
          EOF

          # Check for existing comment from the bot
          EXISTING_COMMENT=$(gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} \
            --json id,author,body \
            --jq '[.[] | select(.author.login == "${{ steps.setup-bot.outputs.bot-user-login }}" and (.body | contains("Generated by GitHub Models AI")))] | .[0].id // null')

          if [[ -n "$EXISTING_COMMENT" && "$EXISTING_COMMENT" != "null" ]]; then
            # Update existing comment
            gh pr comment ${{ github.event.pull_request.number }} \
              --edit $EXISTING_COMMENT \
              --body-file /tmp/ai-title-comment.md \
              --repo ${{ github.repository }}
          else
            # Create new comment
            gh pr comment ${{ github.event.pull_request.number }} \
              --body-file /tmp/ai-title-comment.md \
              --repo ${{ github.repository }}
          fi
