name: AI PR Title Review for Stirling-PDF

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  ai-title-review:
    permissions:
      contents: read
      pull-requests: write
      models: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup GitHub App Bot
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Gather PR Information
        id: pr-info
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Collect PR title and changed files
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)

          # Save to files for AI processing
          echo "$PR_TITLE" > $GITHUB_WORKSPACE/pr-title.txt
          echo "$CHANGED_FILES" > $GITHUB_WORKSPACE/changed-files.txt

          # Classify change scope based on file patterns specific to Stirling-PDF
          if [[ "$CHANGED_FILES" =~ ^src/main/java/stirling/software/SPDF/.* ]]; then
            echo "change-scope=backend" >> $GITHUB_OUTPUT
          elif [[ "$CHANGED_FILES" =~ ^src/main/resources/static/.* ]]; then
            echo "change-scope=frontend" >> $GITHUB_OUTPUT
          elif [[ "$CHANGED_FILES" =~ ^(Dockerfile.*|docker-compose.yml) ]]; then
            echo "change-scope=deployment" >> $GITHUB_OUTPUT
          elif [[ "$CHANGED_FILES" =~ ^docs/.* ]]; then
            echo "change-scope=documentation" >> $GITHUB_OUTPUT
          else
            echo "change-scope=other" >> $GITHUB_OUTPUT
          fi

      - name: AI PR Title Analysis
        id: ai-title-analysis
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o
          prompt: |
            You are a senior software engineer reviewing a pull request for Stirling-PDF, a locally hosted web-based PDF manipulation tool. Your task is to evaluate the PR title and suggest improvements based on the changed files.

            **PR Title:** ${{ github.event.pull_request.title }}

            **Changed Files:**
            ```
            $(cat $GITHUB_WORKSPACE/changed-files.txt)
            ```

            **Change Scope:** ${{ steps.pr-info.outputs.change-scope }}

            Please provide:
            1. A brief assessment of the current PR title's clarity and relevance to the Stirling-PDF project.
            2. A suggested improved PR title that accurately reflects the changes, considering Stirling-PDF's focus on PDF operations (e.g., splitting, merging, converting, etc.).
            3. A short explanation of why the suggested title is better, emphasizing alignment with Stirling-PDF's codebase and conventional commit style.
            4. Ensure the suggested title follows conventional commit style (e.g., `feat:`, `fix:`, `docs:`, etc.) and is concise yet descriptive.

            Keep the response concise and formatted as markdown.

      - name: Comment AI Title Suggestion
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
        run: |
          # Create PR comment with AI analysis
          cat > /tmp/ai-title-comment.md << 'EOF'
          ## ðŸ¤– AI PR Title Suggestion for Stirling-PDF

          ${{ steps.ai-title-analysis.outputs.response }}

          ---
          *Generated by GitHub Models AI*
          EOF

          gh pr comment ${{ github.event.pull_request.number }} \
            --body-file /tmp/ai-title-comment.md \
            --repo ${{ github.repository }}
