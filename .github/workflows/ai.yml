name: AI PR Title Review for Stirling-PDF

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  ai-title-review:
    permissions:
      contents: read
      pull-requests: write
      models: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup GitHub App Bot
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Gather PR Information
        id: pr-info
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Collect PR title and changed files
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only || echo "Unable to retrieve changed files")
          # Collect diff content for changed files
          DIFF_CONTENT=$(gh pr diff $PR_NUMBER || echo "Unable to retrieve diff content")

          # Save to files for AI processing
          echo "$PR_TITLE" > $GITHUB_WORKSPACE/pr-title.txt
          echo "$CHANGED_FILES" > $GITHUB_WORKSPACE/changed-files.txt
          echo "$DIFF_CONTENT" > $GITHUB_WORKSPACE/diff-content.txt

          # Initialize change scope
          CHANGE_SCOPE=""

          # Classify change scope based on file patterns specific to Stirling-PDF
          if [[ "$CHANGED_FILES" =~ ^src/main/java/stirling/software/SPDF/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}backend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/main/resources/(static|templates)/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}frontend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(Dockerfile.*|docker-compose.yml|src/main/resources/application.*\.properties) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}deployment,"
          fi
          if [[ "$CHANGED_FILES" =~ ^docs/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}documentation,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/test/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}tests,"
          fi
          if [[ "$CHANGED_FILES" =~ ^\.github/workflows/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}ci,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/main/resources/messages_.*\.properties$ ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}i18n,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(build.gradle$|settings.gradle$|README.md$|\.gitignore$) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}config,"
          fi

          # Fallback for unclassified files
          if [[ -z "$CHANGE_SCOPE" ]]; then
            CHANGE_SCOPE="system"
          else
            # Remove trailing comma
            CHANGE_SCOPE="${CHANGE_SCOPE%,}"
          fi

          echo "change-scope=$CHANGE_SCOPE" >> $GITHUB_OUTPUT

      - name: Debug File Contents
        run: |
          echo "Changed Files:"
          cat $GITHUB_WORKSPACE/changed-files.txt || echo "No changed files found"
          echo "Diff Content:"
          cat $GITHUB_WORKSPACE/diff-content.txt || echo "No diff content found"

      - name: AI PR Title Analysis
        id: ai-title-analysis
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o
          prompt: |
            You are a senior software engineer reviewing a pull request for Stirling-PDF, a locally hosted web-based PDF manipulation tool built with Gradle. Your task is to generate an independent PR title based solely on the diff content and change scope, without any reference to the provided PR title. Then, compare the provided PR title to the AI-generated title to evaluate its quality. Suggest improvements only if the provided title is significantly deficient (rating â‰¤ 5).

            **Provided PR Title:** ${{ github.event.pull_request.title }}

            **Changed Files:**
            ```
            $(cat $GITHUB_WORKSPACE/changed-files.txt || echo "No changed files available")
            ```

            **Change Scope:** ${{ steps.pr-info.outputs.change-scope }}

            **Diff Content:**
            ```
            $(cat $GITHUB_WORKSPACE/diff-content.txt || echo "No diff content available")
            ```

            Please provide:
            1. An independently generated PR title based solely on the diff content and change scope, using conventional commit style (e.g., `build:`, `chore:`, `ci:`, `docs:`, `feat:`, `fix:`, `perf:`, `refactor:`, `revert:`, `style:`, `test:`) and keeping it concise yet descriptive. Do not use or reference the provided PR title in any way when generating this title. If diff content is unavailable, base the title on the change scope and file names. Avoid emojis and ensure translations are not classified as `docs`.
            2. A rating of the provided PR title on a scale of 1 to 10 (1 = worst, 10 = best), based on its clarity, relevance, and alignment with the changes compared to the AI-generated title.
            3. A brief assessment of whether the provided PR title is sufficiently clear and relevant to the Stirling-PDF project (e.g., reflects PDF operations like splitting, merging, converting, or project maintenance), considering the diff content or change scope.
            4. If the provided title is inadequate (rating â‰¤ 5), suggest the AI-generated title as an improvement and provide a short explanation of why it better aligns with the changes, referencing specific changes in the diff or change scope.
            5. If the provided title is acceptable (rating â‰¥ 6), state that no change is needed and briefly explain why, comparing it to the AI-generated title.

            **Important**: The provided PR title must not influence the generation of the AI title in any way. Only suggest the AI-generated title if the provided title is significantly deficient (rating â‰¤ 5). Avoid iterative refinements like changing "miscellaneous files" to "configuration and scripts" unless the improvement is substantial. If diff content is missing, use the change scope and file names to generate and evaluate the title.

            Keep the response concise and formatted as markdown, with the rating and AI-generated title displayed prominently (e.g., "**Rating**: X/10", "**AI-Generated Title**: ...").

      - name: Update or Create PR Comment
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
          BOT_USER: "${{ steps.setup-bot.outputs.bot-user-login || github.actor }}"
        run: |
          # Create the comment content
          cat > /tmp/ai-title-comment.md << 'EOF'
          ## ðŸ¤– AI PR Title Suggestion for Stirling-PDF

          ${{ steps.ai-title-analysis.outputs.response }}

          ---
          *Generated by GitHub Models AI*
          EOF

          # Query existing comments using GitHub API
          EXISTING_COMMENT=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq "[.[] | select(.user.login == \"$BOT_USER\" and (.body | contains(\"Generated by GitHub Models AI\")))] | .[0].id // null")

          if [[ -n "$EXISTING_COMMENT" && "$EXISTING_COMMENT" != "null" ]]; then
            # Update existing comment
            gh api \
              -H "Accept: application/vnd.github+json" \
              --method PATCH \
              /repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT \
              -F body=@/tmp/ai-title-comment.md
          else
            # Create new comment
            gh pr comment ${{ github.event.pull_request.number }} \
              --body-file /tmp/ai-title-comment.md \
              --repo ${{ github.repository }}
          fi
