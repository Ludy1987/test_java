name: AI PR Title Review for Stirling-PDF

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  ai-title-review:
    permissions:
      contents: read
      pull-requests: write
      models: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup GitHub App Bot
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Gather PR Information
        id: pr-info
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Collect PR title and changed files
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          # Collect diff content for changed files
          DIFF_CONTENT=$(gh pr diff $PR_NUMBER)

          # Save to files for AI processing
          echo "$PR_TITLE" > $GITHUB_WORKSPACE/pr-title.txt
          echo "$CHANGED_FILES" > $GITHUB_WORKSPACE/changed-files.txt
          echo "$DIFF_CONTENT" > $GITHUB_WORKSPACE/diff-content.txt

          # Initialize change scope
          CHANGE_SCOPE=""

          # Classify change scope based on file patterns specific to Stirling-PDF
          if [[ "$CHANGED_FILES" =~ ^src/main/java/stirling/software/SPDF/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}backend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/main/resources/(static|templates)/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}frontend,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(Dockerfile.*|docker-compose.yml|src/main/resources/application.*\.properties) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}deployment,"
          fi
          if [[ "$CHANGED_FILES" =~ ^docs/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}documentation,"
          fi
          if [[ "$CHANGED_FILES" =~ ^src/test/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}tests,"
          fi
          if [[ "$CHANGED_FILES" =~ ^\.github/workflows/.* ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}ci,"
          fi
          if [[ "$CHANGED_FILES" =~ ^main/resources/messages_[a-zA-Z_]{2}_[a-zA-Z_]{2,7}.properties ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}i18n,"
          fi
          if [[ "$CHANGED_FILES" =~ ^(build.gradle|README.md|\.gitignore) ]]; then
            CHANGE_SCOPE="${CHANGE_SCOPE}config,"
          fi

          # Fallback for unclassified files
          if [[ -z "$CHANGE_SCOPE" ]]; then
            CHANGE_SCOPE="other"
          else
            # Remove trailing comma
            CHANGE_SCOPE="${CHANGE_SCOPE%,}"
          fi

          echo "change-scope=$CHANGE_SCOPE" >> $GITHUB_OUTPUT

      - name: AI PR Title Analysis
        id: ai-title-analysis
        uses: actions/ai-inference@v1
        with:
          model: deepseek/DeepSeek-R1-0528
          prompt: |
            You are a senior software engineer reviewing a pull request for Stirling-PDF, a locally hosted web-based PDF manipulation tool built with Gradle. Your task is to evaluate the PR title by analyzing the content of the changed files to understand the nature of the changes. Suggest improvements only if the current title is unclear, overly vague, or misaligned with the changes. Avoid minor or pedantic refinements.

            **PR Title:** ${{ github.event.pull_request.title }}

            **Changed Files:**
            ```
            $(cat $GITHUB_WORKSPACE/changed-files.txt)
            ```

            **Change Scope:** ${{ steps.pr-info.outputs.change-scope }}

            **Diff Content:**
            ```
            $(cat $GITHUB_WORKSPACE/diff-content.txt)
            ```

            Please provide:
            1. A rating of the current PR title on a scale of 1 to 10 (1 = worst, 10 = best), based on its clarity, relevance, and alignment with the changes observed in the diff content.
            2. A brief assessment of whether the current PR title is sufficiently clear and relevant to the Stirling-PDF project (e.g., reflects PDF operations like splitting, merging, converting, or project maintenance), considering the specific changes in the diff.
            3. If the title is inadequate (e.g., too vague like "Peter" or not descriptive, rating â‰¤ 5), suggest one improved PR title that accurately reflects the changes. Use conventional commit style (e.g., `feat:`, `fix:`, `docs:`, `chore:`) and keep it concise yet descriptive.
            4. If a new title is suggested, provide a short explanation of why it better aligns with the changes, focusing on significant improvements over minor wording tweaks, and reference specific changes in the diff.
            5. If the current title is already clear and appropriate, state that no change is needed and briefly explain why, referencing the diff content.

            **Important**: Only suggest a new title if the current one is significantly deficient (e.g., too generic, misleading, or missing context, rating â‰¤ 5). Avoid iterative refinements like changing "miscellaneous files" to "configuration and scripts" unless the improvement is substantial.

            Keep the response concise and formatted as markdown, with the rating displayed prominently (e.g., "**Rating**: X/10").

      - name: Comment AI Title Suggestion
        env:
          GH_TOKEN: "${{ steps.setup-bot.outputs.token }}"
        run: |
          # Create PR comment with AI analysis
          cat > /tmp/ai-title-comment.md << 'EOF'
          ## ðŸ¤– AI PR Title Suggestion for Stirling-PDF

          ${{ steps.ai-title-analysis.outputs.response }}

          ---
          *Generated by GitHub Models AI*
          EOF

          gh pr comment ${{ github.event.pull_request.number }} \
            --body-file /tmp/ai-title-comment.md \
            --repo ${{ github.repository }}
